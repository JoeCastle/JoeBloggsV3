<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JoeBloggs | A blog by Joseph Castle</title>
    <link>https://blog.joecastle.co.uk</link>
    <description>The personal blog of Joseph Castle, a Senior Full-Stack Software Developer writing about React, .NET, and SQL Server.</description>
    <language>en-gb</language>
    <lastBuildDate>Mon, 30 Jun 2025 20:35:43 GMT</lastBuildDate>
    <managingEditor>Joseph Castle</managingEditor>
    
  <item>
    <title><![CDATA[Answering Common Questions Asked by Junior Developers]]></title>
    <link>https://blog.joecastle.co.uk/blog/answering-junior-questions</link>
    <guid>https://blog.joecastle.co.uk/blog/answering-junior-questions</guid>
    <pubDate>Mon, 26 May 2025 00:00:00 GMT</pubDate>
    <author>Joseph Castle</author>
    <category><![CDATA[software development]]></category>
    <category><![CDATA[junior developer]]></category>
    <category><![CDATA[developer advice]]></category>
    <category><![CDATA[programming languages]]></category>
    <category><![CDATA[coding projects]]></category>
    <category><![CDATA[software engineer career]]></category>
    <description><![CDATA[Answering questions asked by junior developers: choosing your first language, building a portfolio, gaining experience, and thriving in your first tech job. Includes real-world advice, resources, and encouragement.]]></description>
    <content:encoded><![CDATA[
Starting a career in software development can feel overwhelming. In my first few months I was excited, confused, and bombarded by information from every direction. If you're reading this, you're probably facing the same questions I did. This post is here to help you cut through the noise, find your path, and start building your future in tech.

Here I've gathered the most common questions junior developers ask, and I'll share my answers and resources to help you move forward.

---

## 1. What programming language should I start with?

There's no single "best" language, but here's a quick comparison to help you decide:

| Language    | Best For                | Pros                                   | Cons                  |
|-------------|-------------------------|----------------------------------------|-----------------------|
| JavaScript  | Web development         | Huge community, easy to start, in-demand | Can be quirky, async can confuse beginners |
| Python      | Data science, scripting | Readable, versatile, lots of tutorials | Slower for some apps  |
| Java/C#     | Enterprise, mobile      | Strong typing, jobs in big companies   | Verbose, steeper learning curve |

**My advice:** Pick one that matches your interests and stick with it long enough to build something real. Consistency beats chasing the "perfect" language.

I started with VisualBasic and VB.NET in school. Then I used Java in university. Now I professionally build websites using React, .NET, and SQL Server.

The languages you use will change. Your needs will change.

**Resources:**
- <a href="https://www.freecodecamp.org/" target="_blank" rel="noopener noreferrer">freeCodeCamp</a>
- <a href="https://www.codecademy.com/" target="_blank" rel="noopener noreferrer">Codecademy</a>
- <a href="https://wiki.python.org/moin/BeginnersGuide/NonProgrammers" target="_blank" rel="noopener noreferrer">Python.org Beginner's Guide</a>

---

## 2. Do I need a computer science degree to get a job?

**Short answer:** No. Many developers are self-taught or come from bootcamps. What matters most is your ability to solve problems, build things, and communicate.

According to Stack Overflow's 2024 survey, about 40% of developers don't have a CS degree, with about 20% having no degree at all.

**Alternative paths:**
- Self-study (YouTube, blogs, open-source, personal projects etc)
- MOOCs (e.g., <a href="https://www.coursera.org/" target="_blank" rel="noopener noreferrer">Coursera</a>, <a href="https://www.edx.org/" target="_blank" rel="noopener noreferrer">edX</a>)
- Apprenticeships
- Coding bootcamps


**Long answer:** It depends. It's an option that provide structured learning and shows employers that you can work to deadlines. You're presented with and guided through a wide range of topics.

It's an additional certification that you can add to your CV. You will be competing with other developers, so if another developer has similar experience and projects as you do, them having a degree could shift it in their favour.

However, employers will be more impressed by projects and experience. So work on projects that you can demo which will prove to employers that you can actually code and create projects. I'd be more likely to hire someone with no degree that can showcase projects, rather than someone with a degree and no projects under their belt.

Also, you'd be surprised by how many candidates finish a degree but are unable to code.

Realisticly you can get the equivalent of a degree for free online. You mainly lose out on the structure, guidance and certificate. The main benefit of skipping a degree is no student loan.

Most importantly:
- Can you solve problems?
- Can you build projects and explain your code?
- Can you collaborate?

Full disclosure: I have a BSc in Computer Science and I found my first job through my university.

---

## 3. What projects should I build to gain experience?

Build projects that solve real problems or showcase your skills. Here are some ideas:
- Portfolio website (show off your work)
- To-do list app with local storage or a backend
- Weather app using an API
- Simple blog platform (build your own blog)
- Budgeting or habit tracker
- Game (even a simple one like Tic-Tac-Toe)
- Clone a popular app (Twitter, Reddit, etc.)

**Resources for ideas:**
- <a href="https://www.frontendmentor.io/" target="_blank" rel="noopener noreferrer">Frontend Mentor</a>
- <a href="https://github.com/codecrafters-io/build-your-own-x" target="_blank" rel="noopener noreferrer">Build Your Own X</a>
- <a href="https://www.freecodecamp.org/news/python-projects-for-beginners/" target="_blank" rel="noopener noreferrer">freeCodeCamp Project Ideas</a>

**Mini-guide:**
1. Pick a project that interests you.
2. Create an MVP, break it into small tasks.
3. Build, document, and share it on GitHub.
4. Write about what you learned.
5. Iterate or build new projects.

---

## 4. How can I stand out to employers as a junior developer?

**Checklist:**
- Personal, professional or open-source projects
- Clear and straightforward portfolio site
- Professional looking LinkedIn profile
- Appropriate and well structured CV
- Enthusiasm and willingness to learn

---

## 5. What's the difference between junior, mid-level, and senior developers?

| Level   | Experience      | Typical Skills & Responsibilities                |
|---------|-----------------|-------------------------------------------------|
| Junior  | <2 years        | Needs mentoring, learning fundamentals          |
| Mid     | 2–5 years       | Owns features, works more independently         |
| Senior  | 5+ years        | Leads projects, mentors, shapes architecture    |

Though it mostly depends on the company as some have more particular requirements.

---

## 6. How important are soft skills in development?

**Crucial!**
- Communicate ideas clearly
- Work well on a team
- Handle feedback and collaboration
- Adapt to change and uncertainty

Remember that other people don't have the same information that you have in your head. Provide them with context when communicating, especially when messaging over Teams or Slack.

"how do I do blank" isn't very informative.

Try something like this:

"I'm on project A and I'm having some issues with B.
My goal is to achieve C but I'm only able to output D.
I've tried X, Y and Z.
Do you know how to achieve this or where I'm going wrong?"

The second message rovides much more context and helps others exclude approaches you have already tried.

And please use punctuation. It makes messages, especially long ones, much easier to read.

---

## 7. How can I gain real-world experience without a job?

- Build and publish personal projects
- Contribute to open-source (start with <a href="https://goodfirstissue.dev/" target="_blank" rel="noopener noreferrer">good first issues</a>)
- Freelance or build for a local business
- Participate in hackathons (<a href="https://devpost.com/" target="_blank" rel="noopener noreferrer">Devpost</a>)
- Volunteer for nonprofits (<a href="https://www.catchafire.org/" target="_blank" rel="noopener noreferrer">Catchafire</a>)

**Step-by-step: Your first open-source PR**
1. Find a beginner-friendly repo
2. Read the contribution guide
3. Fix a typo or small bug
4. Submit your pull request

---

## 8. What should I include in my developer portfolio?

**Portfolio essentials:**
- Short bio (who you are)
- Links to projects (with descriptions and GitHub links)
- Contact info
- LinkedIn profile
- Optional: résumé, testimonials, blog

Here's my Github and Porfolio website:

<a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a>
<a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a>

**Common mistakes:**
- Too many poor quality projects, not enough detail, no screenshots, no links to demos, broken demos.
- No contact info.
- Outdated or broken links.

**The core structure of your visibility to employers will be:**
- Portfolio website
    - Display and write about your projects. Link to the demos and GitHub repositories.
- GitHub
    - Add comments and tests to your projects.
    - Ensure each project has a README file. As well as screenshots if you don't have them on your portfolio.
- LinkedIn
    - This will be more beneficial as you gain more experience and connections. But you can still display your projects and certifications.
- CV
    - There's plenty of CV guides out there, so don't come up with your own design. The simpler the better.
    - Don't waste space be leaving gaps every where.

---

## 9. How do I prepare for technical interviews?

- Practice algorithms and data structures (<a href="https://leetcode.com/" target="_blank" rel="noopener noreferrer">LeetCode</a>, <a href="https://www.hackerrank.com/" target="_blank" rel="noopener noreferrer">HackerRank</a>)
- Review the basics of your chosen language. Basic syntax and functions.
- Be ready to explain your projects and decisions.
- Prepare for behavioral questions. ("Tell me about a time when...")
- Mock interview with friends or family.

**Mock interview script:**
- Q: "Tell me about a project you're proud of."
- A: "I built a budgeting app using React and Firebase. I learned how to manage authentication and real-time data. The biggest challenge was..."

One of the things the interviewer is looking at is how you approach and solve problems. So it isn't a problem if you don't have the solution right away and need to work it out.

In the interview, it's ok to say "I don't know", if you don't know the answer. Turn this into an advantage. Ask the interviewer and turn it into a discussion and an opportunity to learn.

You can still benefit from failed interviews. Interviewing is a skill that takes practice.

---

## 10. What should I focus on learning first?

**Learning roadmap:**
1. Fundamentals of one language (JavaScript or Python)
2. Version control (Git, GitHub)
3. Basic HTML/CSS (for web dev)
4. Build simple projects
5. Understand how the web works (HTTP, APIs, client/server)

**30-day challenge:**
- Day 1–10: Learn language basics
- Day 11–25: Build a small project
- Day 26–30: Share it online and get feedback

---

## Final Thoughts

Build projects and showcase them. Start simple, then expand as you learn more. Build stuff. Ask for help. Be kind to yourself.

Every developer you look up to once stood exactly where you are now, asking these same questions. 

---

## Where to find me

You can also follow me on <a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a> or on my <a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a> for updates.
]]></content:encoded>
  </item>

  <item>
    <title><![CDATA[Essential Guide for Junior Software Developers: Tips, Mindset, and Best Practices]]></title>
    <link>https://blog.joecastle.co.uk/blog/junior-developer-guide</link>
    <guid>https://blog.joecastle.co.uk/blog/junior-developer-guide</guid>
    <pubDate>Sat, 24 May 2025 00:00:00 GMT</pubDate>
    <author>Joseph Castle</author>
    <category><![CDATA[software development]]></category>
    <category><![CDATA[junior developer]]></category>
    <category><![CDATA[developer advice]]></category>
    <category><![CDATA[career tips]]></category>
    <category><![CDATA[imposter syndrome]]></category>
    <category><![CDATA[programming]]></category>
    <description><![CDATA[A comprehensive guide for junior software developers: practical tips, mindset shifts, real-world stories, and resources to help you thrive in your tech career.]]></description>
    <content:encoded><![CDATA[
Welcome! If you're a junior software developer just starting out in the tech industry, this guide is for you. I wrote this because I remember how tough those first months can be, full of questions, doubts, and the occasional "am I cut out for this?" moment. Here, you'll find practical lessons, mindset shifts, and career tips that many of us learned the hard way, so you don't have to.

---

## Table of Contents

1. [Ask Questions as a Junior Developer](#1-ask-questions-as-a-junior-developer)
2. [How and When to Ask for Help](#2-how-and-when-to-ask-for-help)
3. [You Will Feel Overwhelmed in Software Development](#3-you-will-feel-overwhelmed-in-software-development)
4. [Comparison is the Thief of Joy](#4-comparison-is-the-thief-of-joy)
5. [Make Mistakes (Or Learn from the Mistakes of Others)](#5-make-mistakes-or-learn-from-the-mistakes-of-others)
6. [Build Projects to Level Up Your Skills](#6-build-projects-to-level-up-your-skills)
7. [Overcoming Impostor Syndrome in Development](#7-overcoming-impostor-syndrome-in-development)
8. [Developer Note-Taking Tips for Productivity](#8-developer-note-taking-tips-for-productivity)
9. [Tackling Complex Tasks as a Junior Developer](#9-tackling-complex-tasks-as-a-junior-developer)
10. [Take Breaks to Improve Problem Solving](#10-take-breaks-to-improve-problem-solving)
11. [Ask the Duck: Rubber Duck Debugging](#11-ask-the-duck-rubber-duck-debugging)
12. [Googling Is a Skill in Software Development](#12-googling-is-a-skill-in-software-development)
13. [Don't Rely Solely on AI Tools](#13-dont-rely-solely-on-ai-tools)
14. [Be Conscientious About Code Quality](#14-be-conscientious-about-code-quality)
15. [Why Soft Skills Matter for Developers](#15-why-soft-skills-matter-for-developers)
16. [The "Bus Factor": Writing Team-Friendly Code](#16-the-bus-factor-writing-team-friendly-code)
17. [Building Your Online Presence as a Developer](#17-building-your-online-presence-as-a-developer)

---

## 1. Ask Questions as a Junior Developer

It's OK to ask questions, even ones you think are "stupid." What's not OK is asking the same question over and over without learning from the answer.

Early in my career, I was afraid to ask questions. I thought I'd look silly. But when I finally did, I realized everyone was happy to help and I learned and progressed much faster.

Show the other person what you have already tried. It will help them understand how you think, so they can guide you more effectively. It will also show them that you are actually trying and not just getting them to do the work for you.

Remember that the senior you are talking to was a junior once too. They know that you are inexperienced.

**Pro Tip:** Write down answers you get, so you don't have to ask twice.

---

## 2. How and When to Ask for Help

Asking for help is a sign of good judgment, not failure.

- Try solving the problem first.
- Google it (<a href="https://www.freecodecamp.org/news/how-to-google-like-a-pro/" target="_blank" rel="noopener noreferrer">How to Google Like a Pro</a>).
- Experiment.
- Then ask for help and show what you've tried so far.

**Checklist:**
- What have you tried?
- What did you expect to happen?
- What actually happened?

Be mindful not to waste hours on a problem that a senior would only need 5 minutes to help you with. Find a balance between working on a problem and asking questions. Consider the difference between spending time and wasting time.

---

## 3. You Will Feel Overwhelmed in Software Development

Feeling overwhelmed doesn't mean you're failing, it means you're growing. You are being bombarded with lots of new information, languages, methodologies, software, procedures etc. Your first few months will feel overwhelming.

I still get overwhelmed when learning new tech. The trick is to break things down and focus on one step at a time.

Software development is a big field with a steep learning curve. Even experienced developers don't know everything. Take it one step at a time.

---

## 4. Comparison is the Thief of Joy

There will always be someone better, faster, or more confident than you. Don't measure yourself against them.

Compare yourself only to who you were yesterday, and who you want to be tomorrow.

**Quote:** "Don't compare your chapter 1 to someone else's chapter 20."

---

## 5. Make Mistakes (Or Learn from the Mistakes of Others)

Mistakes are part of the job, and an essential part of learning.

When you mess up, learn from it. And when others mess up, learn from them. Every mistake is a chance to learn and understand something new.

Minimise the effects of potential mistakes. Make frequent backups etc.

**Pro Tip:** When you make a mistake or find a bug, write down what happened and how you fixed it.

---

## 6. Build Projects to Level Up Your Skills

The best way to learn programming is by building things.

- Create side projects
- Rebuild tools you use
- Try new tech in a safe, personal space

**Resource:** <a href="https://www.frontendmentor.io/" target="_blank" rel="noopener noreferrer">Frontend Mentor</a>, <a href="https://github.com/codecrafters-io/build-your-own-x" target="_blank" rel="noopener noreferrer">Build Your Own X</a>

**Checklist:**
- Pick a project that you find interesting
- Break it into smaller tasks
- Share your code on GitHub

I became a better programmer by working on project after project. I was able to see the common successes and failures and was able to learn from them.

Building projects will also allow you to showcase your skills to potential employers.

---

## 7. Overcoming Impostor Syndrome in Development

You'll feel like a fraud at times. You'll doubt your abilities. You'll fear failure. Everyone does, even senior developers.

Being a developer is difficult. Writing code is difficult. Creating projects is difficult. Learning new technologies is difficult.

You never fully escape this, but it does get better.

---

## 8. Developer Note-Taking Tips for Productivity

Help your future self out by making simple, useful notes.

- TODO lists to track your day.
- Analysing tasks and breaking tasks into smaller steps.
- Writing down what you were doing before you stopped work.
- Summarizing concepts or errors you've encountered.
- Storing useful code snippets or scripts.

I started with pen and paper, then began using Notepad++, but that became difficult to manage as I added more notes. Also, it was annoying to transfer the notes between computers.

Now I use Obsidian, but others like Notion are good options too.

Even a paper notepad and pen sitting next to you on your desk can be very useful.

**Tools:** <a href="https://www.notion.com/" target="_blank" rel="noopener noreferrer">Notion</a>, <a href="https://obsidian.md/" target="_blank" rel="noopener noreferrer">Obsidian</a>, <a href="https://www.markdownguide.org/" target="_blank" rel="noopener noreferrer">Markdown</a>

**Pro tip:** Write about tasks, achievements, challenges and projects when they are still fresh in your mind. This will be useful later when writing your CV and discussing them in interviews.

---

## 9. Tackling Complex Tasks as a Junior Developer

> "How do you eat an elephant?"
One bite at a time.

Break complex problems into smaller, manageable steps. Start with what you know. Then work your way through the unknowns bit by bit.

Start writing notes before writing code. Plan what needs to be done first and what can be left for last.

---

## 10. Take Breaks to Improve Problem Solving

Sometimes, stepping away is the best debugging tool.

- Go for a short walk
- Make a drink
- Do something else for 10 minutes

You'll be surprised by how many problems you'll solve as you are going about your everyday chores, or even as you're drifting off to sleep. I find it handy to keep a small note pad next to my desk so I can remember the solution for when I wake up.

---

## 11. Ask the Duck: Rubber Duck Debugging

Explain the problem aloud as if you're teaching it to a rubber duck or as if your are asking a question to a senior developer. You'll often figure out the issue mid-explanation.

<a href="https://rubberduckdebugging.com/" target="_blank" rel="noopener noreferrer">Rubber Duck Debugging</a>

I keep a rubber duck on my desk. It works!

---

## 12. Googling Is a Skill in Software Development

Googling effectively is one of the most underrated developer skills.

No one expects you to remember everything. but you're expected to know **how to find** the answer when you need it. Get good at searching, scanning results, and knowing which sources to trust.

**Tips:**
- Use specific error messages or error codes
- Add the language or framework to your search
- Check Stack Overflow, official docs, and GitHub issues
- Ask chatbots like GPT, though be aware they can be confidently wrong.
- Use advanced search features (<a href="https://support.google.com/websearch/answer/2466433" target="_blank" rel="noopener noreferrer">Refine Google searches</a>)

I Google all of the time. I ask chatbots frequently. I often check stack overflow. I did it when I was a junior and I still do it as a senior.

As you gain more experience you will be able to sift through irrelevant results more quickly.

---

## 13. Don't Rely Solely on AI Tools

AI tools like ChatGPT can save time, but they're not infallible.

They are tools. But if you only use a hammer, everything looks like a nail.

- Always sanity-check code you get from AI
- Understand *why* it works so you can learn
- Never let it replace actual learning or critical thinking

Check out <a href="https://www.freecodecamp.org/news/how-to-use-ai-generated-code/" target="_blank" rel="noopener noreferrer">How to Use AI-Generated Code in a Safe and Effective Way</a>

---

## 14. Be Conscientious About Code Quality

Every change you make affects others. Think ahead.

- Will this break something?
- Is it performant?
- Is it secure?
- Can other developers understand it?

**Checklist:**
- Write clear commit messages
- Leave helpful comments
- Document your code

You might not think this is a priority now, but you will when you break something, or have to come back to some commentless code.

Writing maintainable code is just as important as writing functional code.

---

## 15. Why Soft Skills Matter for Developers

Being a good developer isn't just about code.

- Communicate clearly. Others don't have the information in your head.
- Listen well. Learn from others.
- Provide context. a Teams or Slack message with context will make it easier for the other person to respond.

Remember, you're working with people, not just computers.

You'll frequently be collaborating with:
- Developers
- Designers
- Customers
- Managers

---

## 16. The "Bus Factor": Writing Team-Friendly Code

If you disappeared tomorrow, would anyone else be able to understand your work?

**Tips:**
- Share knowledge
- Write clear commit messages
- Leave documentation and inline comments

---

## 17. Building Your Online Presence as a Developer

- Create a GitHub profile and share your projects
- Write blog posts or tutorials
- Join open-source communities
- Create a LinkedIn profile

**Resource:** <a href="https://www.freecodecamp.org/news/how-to-build-a-developer-portfolio-website/" target="_blank" rel="noopener noreferrer">How to Build Your Own Developer Portfolio Website with HTML, CSS, and JavaScript</a>

---

## Final Thoughts

Being a junior software developer is tough, but you're not alone. Every senior dev has been exactly where you are now. Stick with it, ask questions, build things, and learn a little every day.

---

## Where to find me

You can also follow me on <a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a> or on my <a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a> for updates.
]]></content:encoded>
  </item>

  <item>
    <title><![CDATA[Welcome to My Blog]]></title>
    <link>https://blog.joecastle.co.uk/blog/welcome-to-my-blog</link>
    <guid>https://blog.joecastle.co.uk/blog/welcome-to-my-blog</guid>
    <pubDate>Sun, 27 Apr 2025 00:00:00 GMT</pubDate>
    <author>Joseph Castle</author>
    <category><![CDATA[introduction]]></category>
    <category><![CDATA[developer blog]]></category>
    <category><![CDATA[developer advice]]></category>
    <category><![CDATA[software development]]></category>
    <category><![CDATA[junior developer]]></category>
    <category><![CDATA[career tips]]></category>
    <description><![CDATA[A brief introduction to my blog, my background, and what you can expect as a reader.]]></description>
    <content:encoded><![CDATA[
# Welcome!

Hi, I'm Joe, a software developer and sci-fi enthusiast. I started JoeBloggs to share my journey, lessons learned, and the occasional rant.

I'm a Senior Full-Stack Software Developer based in the UK. I have experience building bespoke web applications using React, TypeScript, .NEt and SQL Server.

## Why This Blog?

When I was starting out, I found the tech world both exciting and overwhelming. There were so many resources, but it was hard to find practical advice. My goal is to create the kind of blog I wish I'd found as a junior developer: friendly, helpful, and straightforward.

## What You'll Find Here

- **Career advice** for junior and aspiring developers
- **Stories from the trenches** real-world lessons, mistakes, and wins
- **Coding tutorials and walkthroughs** (from beginner to advanced)
- **Book and tool reviews**
- **Sci-fi references and tie-ins** (because why not?)

## My Goal

I believe learning should be fun, inclusive, and community-driven. I hope you'll find something here to inspire you and point you in the right direction.

## Where to find me

You can also follow me on <a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a> or on my <a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a> for updates.
]]></content:encoded>
  </item>
  </channel>
</rss>