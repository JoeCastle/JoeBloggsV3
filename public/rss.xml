<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>JoeBloggs | A blog by Joseph Castle</title>
    <link>https://blog.joecastle.co.uk</link>
    <description>The personal blog of Joseph Castle, a Senior Full-Stack Software Developer writing about React, .NET, and SQL Server.</description>
    <language>en-gb</language>
    <lastBuildDate>Tue, 01 Jul 2025 22:48:34 GMT</lastBuildDate>
    <managingEditor>Joseph Castle</managingEditor>
    
  <item>
    <title><![CDATA[Junior Developer Questions Answered: Language, Portfolio, Career]]></title>
    <link>https://blog.joecastle.co.uk/blog/junior-developer-questions</link>
    <guid>https://blog.joecastle.co.uk/blog/junior-developer-questions</guid>
    <pubDate>Mon, 26 May 2025 00:00:00 GMT</pubDate>
    <author>Joseph Castle</author>
    <category><![CDATA[junior developer]]></category>
    <category><![CDATA[developer advice]]></category>
    <category><![CDATA[software development]]></category>
    <category><![CDATA[programming languages]]></category>
    <category><![CDATA[coding projects]]></category>
    <category><![CDATA[tech career]]></category>
    <description><![CDATA[Junior developers ask: which language to learn, how to build a portfolio, get experience, and thrive in their first tech job. Includes real advice, tips, and resources.]]></description>
    <content:encoded><![CDATA[
Starting a career in software development can feel overwhelming. If you're just getting started, you might be asking questions like:

- Which programming language should I learn first?
- Do I need a degree?
- How do I build a portfolio?
- What makes a junior developer stand out?

This post covers all of that, with practical advice, real-world resources, and answers based on my own journey from beginner to professional.

## Table of Contents

1. [Best Programming Languages for Junior Developers](#1-best-programming-languages-for-junior-developers)
2. [Do I Need a Computer Science Degree to Get a Job?](#2-do-i-need-a-computer-science-degree-to-get-a-job)
3. [Projects to Build as a Junior Developer](#3-projects-to-build-as-a-junior-developer)
4. [How Do You Stand Out to Employers as a Junior Developer?](#4-how-do-you-stand-out-to-employers-as-a-junior-developer)
5. [What's the Difference Between Junior, Mid-Level, and Senior Developers?](#5-whats-the-difference-between-junior-mid-level-and-senior-developers)
6. [Why Soft Skills Matter for Developers](#6-why-soft-skills-matter-for-developers)
7. [Ways to Get Real-World Experience Without a Dev Job](#7-ways-to-get-real-world-experience-without-a-dev-job)
8. [What Should I Include in My Developer Portfolio?](#8-what-should-i-include-in-my-developer-portfolio)
9. [How Do I Prepare for Technical Interviews?](#9-how-do-i-prepare-for-technical-interviews)
10. [What Should I Focus on Learning First?](#10-what-should-i-focus-on-learning-first)
11. [Summary: Your First Steps as a Junior Developer](#summary-your-first-steps-as-a-junior-developer)  
12. [Where to Find Me](#where-to-find-me)

---

## 1. Best Programming Languages for Junior Developers

One of the most common questions new developers ask is: what programming language should I start with? Here's a quick comparison to help you choose.

| Language    | Best For                | Pros                                   | Cons                  |
|-------------|-------------------------|----------------------------------------|-----------------------|
| JavaScript  | Web development         | Huge community, easy to start, in-demand | Can be quirky, async can confuse beginners |
| Python      | Data science, scripting | Readable, versatile, lots of tutorials | Slower for some apps  |
| Java/C#     | Enterprise, mobile      | Strong typing, jobs in big companies   | Verbose, steeper learning curve |

**My advice:** Pick one that matches your interests and stick with it long enough to build something real. Consistency beats chasing the "perfect" language.

I started with VisualBasic and VB.NET in school. Then I used Java in university. Now I professionally build websites using React, .NET, and SQL Server.

The languages you use will change. Your needs will change.

**Resources:**
- <a href="https://www.freecodecamp.org/" target="_blank" rel="noopener noreferrer">freeCodeCamp</a>
- <a href="https://www.codecademy.com/" target="_blank" rel="noopener noreferrer">Codecademy</a>
- <a href="https://wiki.python.org/moin/BeginnersGuide/NonProgrammers" target="_blank" rel="noopener noreferrer">Python.org Beginner's Guide</a>

---

## 2. Do I Need a Computer Science Degree to Get a Job?

**Short answer:** No. Many developers are self-taught or come from bootcamps. What matters most is your ability to solve problems, build things, and communicate.

According to Stack Overflow's 2024 survey, about 40% of developers don't have a CS degree, with about 20% having no degree at all.

**Alternative paths:**
- Self-study (YouTube, blogs, open-source, personal projects etc)
- MOOCs (e.g., <a href="https://www.coursera.org/" target="_blank" rel="noopener noreferrer">Coursera</a>, <a href="https://www.edx.org/" target="_blank" rel="noopener noreferrer">edX</a>)
- Apprenticeships
- Coding bootcamps


**Long answer:** It depends. It's an option that provide structured learning and shows employers that you can work to deadlines. You're presented with and guided through a wide range of topics.

It's an additional certification that you can add to your CV. You will be competing with other developers, so if another developer has similar experience and projects as you do, them having a degree could shift it in their favour.

However, employers will be more impressed by projects and experience. So work on projects that you can demo which will prove to employers that you can actually code and create projects. I'd be more likely to hire someone with no degree that can showcase projects, rather than someone with a degree and no projects under their belt.

Also, you'd be surprised by how many candidates finish a degree but are unable to code.

Realisticly you can get the equivalent of a degree for free online. You mainly lose out on the structure, guidance and certificate. The main benefit of skipping a degree is no student loan.

Most importantly:
- Can you solve problems?
- Can you build projects and explain your code?
- Can you collaborate?

Full disclosure: I have a BSc in Computer Science and I found my first job through my university.

---

## 3. Projects to Build as a Junior Developer

To gain experience, build projects that solve real problems or showcase your skills. Employers love to see what you’ve made, not just what you know.

Here are some ideas:
- Portfolio website (show off your work)
- To-do list app with local storage or a backend
- Weather app using an API
- Simple blog platform (build your own blog)
- Budgeting or habit tracker
- Game (even a simple one like Tic-Tac-Toe)
- Clone a popular app (Twitter, Reddit, etc.)

**Resources for ideas:**
- <a href="https://www.frontendmentor.io/" target="_blank" rel="noopener noreferrer">Frontend Mentor</a>
- <a href="https://github.com/codecrafters-io/build-your-own-x" target="_blank" rel="noopener noreferrer">Build Your Own X</a>
- <a href="https://www.freecodecamp.org/news/python-projects-for-beginners/" target="_blank" rel="noopener noreferrer">freeCodeCamp Project Ideas</a>

**Mini-guide:**
1. Pick a project that interests you.
2. Create an MVP, break it into small tasks.
3. Build, document, and share it on GitHub.
4. Write about what you learned.
5. Iterate or build new projects.

---

## 4. How do you Stand Out to Employers as a Junior Developer?

To get noticed, show real initiative. That means building projects, sharing your work, and making it easy for others to see what you're capable of.

**Checklist:**
- Personal, professional or open-source projects
- Clear and straightforward portfolio site
- Professional looking LinkedIn profile
- Appropriate and well structured CV
- Enthusiasm and willingness to learn

---

## 5. What's the Difference Between Junior, Mid-Level, and Senior Developers?

| Level   | Experience      | Typical Skills & Responsibilities                |
|---------|-----------------|-------------------------------------------------|
| Junior  | <2 years        | Needs mentoring, learning fundamentals          |
| Mid     | 2–5 years       | Owns features, works more independently         |
| Senior  | 5+ years        | Leads projects, mentors, shapes architecture    |

Though it mostly depends on the company as some have more particular requirements.

---

## 6. Why Soft Skills Matter for Developers?

Soft skills like communication and teamwork are just as important as coding ability. Developers work with people, not just computers. So be mindful that you will also need to:
- Communicate ideas clearly
- Work well on a team
- Handle feedback and collaboration
- Adapt to change and uncertainty

Remember that other people don't have the same information that you have in your head. Provide them with context when communicating, especially when messaging over Teams or Slack.

"how do I do blank" isn't very informative.

Try something like this:

"I'm on project A and I'm having some issues with B.
My goal is to achieve C but I'm only able to output D.
I've tried X, Y and Z.
Do you know how to achieve this or where I'm going wrong?"

The second message rovides much more context and helps others exclude approaches you have already tried.

And please use punctuation. It makes messages, especially long ones, much easier to read.

---

## 7. Ways to Get Real-World Experience Without a Dev Job

You don’t need a job to build experience. Create your own projects, contribute to open-source, or help out a local business.

- Build and publish personal projects
- Contribute to open-source (start with <a href="https://goodfirstissue.dev/" target="_blank" rel="noopener noreferrer">good first issues</a>)
- Freelance or build for a local business
- Participate in hackathons (<a href="https://devpost.com/" target="_blank" rel="noopener noreferrer">Devpost</a>)
- Volunteer for nonprofits (<a href="https://www.catchafire.org/" target="_blank" rel="noopener noreferrer">Catchafire</a>)

**Step-by-step: Your first open-source PR**
1. Find a beginner-friendly repo
2. Read the contribution guide
3. Fix a typo or small bug
4. Submit your pull request

---

## 8. What Should I Include in My Developer Portfolio?

**Portfolio essentials:**
- Short bio (who you are)
- Links to projects (with descriptions and GitHub links)
- Contact info
- LinkedIn profile
- Optional: résumé, testimonials, blog

Here's my Github and Porfolio website:

- <a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a>
- <a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a>

**Common mistakes:**
- Too many poor quality projects, not enough detail, no screenshots, no links to demos, broken demos.
- No contact info.
- Outdated or broken links.

**The core structure of your visibility to employers will be:**
- Portfolio website
    - Display and write about your projects. Link to the demos and GitHub repositories.
- GitHub
    - Add comments and tests to your projects.
    - Ensure each project has a README file. As well as screenshots if you don't have them on your portfolio.
- LinkedIn
    - This will be more beneficial as you gain more experience and connections. But you can still display your projects and certifications.
- CV
    - There's plenty of CV guides out there, so don't come up with your own design. The simpler the better.
    - Don't waste space be leaving gaps every where.

---

## 9. How Do I Prepare for Technical Interviews?

- Practice algorithms and data structures (<a href="https://leetcode.com/" target="_blank" rel="noopener noreferrer">LeetCode</a>, <a href="https://www.hackerrank.com/" target="_blank" rel="noopener noreferrer">HackerRank</a>)
- Review the basics of your chosen language. Basic syntax and functions.
- Be ready to explain your projects and decisions.
- Prepare for behavioral questions. ("Tell me about a time when...")
- Mock interview with friends or family.

**Mock interview script:**
- Q: "Tell me about a project you're proud of."
- A: "I built a budgeting app using React and Firebase. I learned how to manage authentication and real-time data. The biggest challenge was..."

One of the things the interviewer is looking at is how you approach and solve problems. So it isn't a problem if you don't have the solution right away and need to work it out.

In the interview, it's ok to say "I don't know", if you don't know the answer. Turn this into an advantage. Ask the interviewer and turn it into a discussion and an opportunity to learn.

You can still benefit from failed interviews. Interviewing is a skill that takes practice.

---

## 10. What Should I Focus on Learning First?

**Learning roadmap:**
1. Fundamentals of one language (JavaScript or Python)
2. Version control (Git, GitHub)
3. Basic HTML/CSS (for web dev)
4. Build simple projects
5. Understand how the web works (HTTP, APIs, client/server)

**30-day challenge:**
- Day 1–10: Learn language basics
- Day 11–25: Build a small project
- Day 26–30: Share it online and get feedback

---

## Summary: Your First Steps as a Junior Developer

To get started as a junior developer:

- Choose one language and build real projects with it
- Share your work through a portfolio, GitHub, and LinkedIn
- Focus on learning by doing, not just watching tutorials
- Practice communication and teamwork, not just code
- Apply to jobs, join communities, and stay curious

You don’t need to know everything. You just need to start building and keep learning.

Every developer starts as a beginner. Keep going, and you’ll get there.

---

## Where to Find Me

You can also follow me on <a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a> or on my <a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a> for updates.
]]></content:encoded>
  </item>

  <item>
    <title><![CDATA[Essential Guide for Junior Software Developers: Tips, Mindset, and Best Practices]]></title>
    <link>https://blog.joecastle.co.uk/blog/junior-developer-guide</link>
    <guid>https://blog.joecastle.co.uk/blog/junior-developer-guide</guid>
    <pubDate>Sat, 24 May 2025 00:00:00 GMT</pubDate>
    <author>Joseph Castle</author>
    <category><![CDATA[junior developer]]></category>
    <category><![CDATA[developer advice]]></category>
    <category><![CDATA[software development]]></category>
    <category><![CDATA[imposter syndrome]]></category>
    <category><![CDATA[code quality]]></category>
    <category><![CDATA[tech career]]></category>
    <description><![CDATA[Essential guide for junior software developers: practical tips, mindset shifts, real‑world stories and resources to help you thrive in your tech career.]]></description>
    <content:encoded><![CDATA[
Starting as a junior software developer can feel overwhelming and full of questions. You may be thinking:

- How do I ask smart questions?
- When should I ask for help?
- How do I build confidence and workflow habits?

In this guide you will find practical tips, mindset shifts, and resources based on real-world experience to help you grow your skills and confidence.

---

## Table of Contents

1. [Ask Questions as a Junior Developer](#1-ask-questions-as-a-junior-developer)  
2. [When and How to Ask for Help](#2-when-and-how-to-ask-for-help)  
3. [It Is Normal to Feel Overwhelmed](#3-it-is-normal-to-feel-overwhelmed)  
4. [Comparison Steals Your Joy](#4-comparison-steals-your-joy)  
5. [Mistakes Are Learning Opportunities](#5-mistakes-are-learning-opportunities)  
6. [Build Projects to Grow Your Skills](#6-build-projects-to-grow-your-skills)  
7. [Overcoming Imposter Syndrome](#7-overcoming-imposter-syndrome)  
8. [Effective Developer Note‑Taking](#8-effective-developer-note-taking)  
9. [Break Down Complex Tasks](#9-break-down-complex-tasks)  
10. [Take Breaks to Sharpen Your Thinking](#10-take-breaks-to-sharpen-your-thinking)  
11. [Use Rubber Duck Debugging](#11-use-rubber-duck-debugging)  
12. [Get Good at Googling](#12-get-good-at-googling)  
13. [AI Tools Need Human Oversight](#13-ai-tools-need-human-oversight)  
14. [Write Maintainable Code from Day One](#14-write-maintainable-code-from-day-one)  
15. [Why Soft Skills Matter](#15-why-soft-skills-matter)  
16. [Write Code With the Bus Factor in Mind](#16-write-code-with-the-bus-factor-in-mind)  
17. [Build Your Online Presence](#17-build-your-online-presence)
18. [Final Thoughts](#final-thoughts)  
19. [Where to Find Me](#where-to-find-me)

---

## 1. Ask Questions as a Junior Developer

It's OK to ask questions, even ones you think are "stupid." What's not OK is asking the same question over and over without learning from the answer.

Early in my career, I was afraid to ask questions. I thought I'd look silly. But when I finally did, I realised everyone was happy to help and I learned and progressed much faster.

Show the other person what you have already tried. It will help them understand how you think, so they can guide you more effectively. It will also show them that you are actually trying and not just getting them to do the work for you.

Remember that the senior you are talking to was a junior once too. They know that you are inexperienced.

**Pro Tip:** Write down answers you get, so you don't have to ask twice.

---

## 2. When and How to Ask for Help

Asking for help is a sign of good judgment, not failure.

- Try solving the problem first.
- Google it (<a href="https://www.freecodecamp.org/news/how-to-google-like-a-pro/" target="_blank" rel="noopener noreferrer">How to Google Like a Pro</a>).
- Experiment.
- Then ask for help and show what you've tried so far.

**Checklist:**
- What have you tried?
- What did you expect to happen?
- What actually happened?

Be mindful not to waste hours on a problem that a senior would only need 5 minutes to help you with. Find a balance between working on a problem and asking questions. Consider the difference between spending time and wasting time.

---

## 3. It Is Normal to Feel Overwhelmed

Feeling overwhelmed doesn't mean you're failing, it means you're growing. You are being bombarded with lots of new information, languages, methodologies, software, procedures etc. Your first few months will feel overwhelming.

I still get overwhelmed when learning new tech. The trick is to break things down and focus on one step at a time.

Software development is a big field with a steep learning curve. Even experienced developers don't know everything. Take it one step at a time.

---

## 4. Comparison Steals Your Joy

Comparing yourself to more experienced devs can harm your confidence.  
There will always be someone better, faster, or more confident than you. Don't measure yourself against them.

Only compare yourself only to who you were yesterday, and who you want to be tomorrow.

**Quote:** "Don't compare your chapter 1 to someone else's chapter 20."

---

## 5. Mistakes Are Learning Opportunities

Mistakes are part of the job, and an essential part of learning.

When you mess up, learn from it. And when others mess up, learn from them. Every mistake is a chance to learn and understand something new.

Minimise the effects of potential mistakes. Make frequent backups etc.

**Pro Tip:** When you make a mistake or find a bug, write down what happened and how you fixed it.

---

## 6. Build Projects to Grow Your Skills

The best way to learn programming is by building things.

- Create side projects
- Rebuild tools you use
- Try new tech in a safe, personal space

**Resource:** <a href="https://www.frontendmentor.io/" target="_blank" rel="noopener noreferrer">Frontend Mentor</a>, <a href="https://github.com/codecrafters-io/build-your-own-x" target="_blank" rel="noopener noreferrer">Build Your Own X</a>

**Checklist:**
- Pick a project that you find interesting
- Break it into smaller tasks
- Share your code on GitHub

I became a better programmer by working on project after project. I was able to see the common successes and failures and was able to learn from them.

Building projects will also allow you to showcase your skills to potential employers.

---

## 7. Overcoming Imposter Syndrome

You'll feel like a fraud at times. You'll doubt your abilities. You'll fear failure. Everyone does, even senior developers.

Being a developer is difficult. Writing code is difficult. Creating projects is difficult. Learning new technologies is difficult.

You never fully escape this, but it does get better.

---

## 8. Effective Developer Note‑Taking

Help your future self out by making simple, useful notes.

- TODO lists to track your day.
- Analysing tasks and breaking tasks into smaller steps.
- Writing down what you were doing before you stopped work.
- Summarizing concepts or errors you've encountered.
- Storing useful code snippets or scripts.

I started with pen and paper, then began using Notepad++, but that became difficult to manage as I added more notes. Also, it was annoying to transfer the notes between computers.

Now I use Obsidian, but others like Notion are good options too.

Even a paper notepad and pen sitting next to you on your desk can be very useful.

**Tools:** <a href="https://www.notion.com/" target="_blank" rel="noopener noreferrer">Notion</a>, <a href="https://obsidian.md/" target="_blank" rel="noopener noreferrer">Obsidian</a>, <a href="https://www.markdownguide.org/" target="_blank" rel="noopener noreferrer">Markdown</a>

**Pro tip:** Write about tasks, achievements, challenges and projects when they are still fresh in your mind. This will be useful later when writing your CV and discussing them in interviews.

---

## 9. Break Down Complex Tasks

> "How do you eat an elephant?"
One bite at a time.

Break complex problems into smaller, manageable steps. Start with what you know. Then work your way through the unknowns bit by bit.

Start writing notes before writing code. Plan what needs to be done first and what can be left for last.

---

## 10. Take Breaks to Sharpen Your Thinking

Sometimes, stepping away is the best debugging tool.

- Go for a short walk
- Make a drink
- Do something else for 10 minutes

You'll be surprised by how many problems you'll solve as you are going about your everyday chores, or even as you're drifting off to sleep. I find it handy to keep a small note pad next to my desk so I can remember the solution for when I wake up.

---

## 11. Use Rubber Duck Debugging

Explaining your problem out loud can help you spot the solution.  
Talk through the code with a "rubber duck", or a friendly coworker.

Explain the problem aloud as if you're teaching it to a rubber duck or as if your are asking a question to a senior developer. You'll often figure out the issue mid-explanation.

<a href="https://rubberduckdebugging.com/" target="_blank" rel="noopener noreferrer">Rubber Duck Debugging</a>

I keep a rubber duck on my desk. It works!

---

## 12. Get Good at Googling

Googling effectively is one of the most underrated developer skills.

No one expects you to remember everything. but you're expected to know **how to find** the answer when you need it. Get good at searching, scanning results, and knowing which sources to trust.

**Tips:**
- Use specific error messages or error codes
- Add the language or framework to your search
- Check Stack Overflow, official docs, and GitHub issues
- Ask chatbots like GPT, though be aware they can be confidently wrong.
- Use advanced search features (<a href="https://support.google.com/websearch/answer/2466433" target="_blank" rel="noopener noreferrer">Refine Google searches</a>)

I Google all of the time. I ask chatbots frequently. I often check stack overflow. I did it when I was a junior and I still do it as a senior.

As you gain more experience you will be able to sift through irrelevant results more quickly.

---

## 13. AI Tools Need Human Oversight

AI tools like ChatGPT can save time, but they're not infallible.

They are tools. But if you only use a hammer, everything looks like a nail.

- Always sanity-check code you get from AI
- Understand *why* it works so you can learn
- Never let it replace actual learning or critical thinking

Check out <a href="https://www.freecodecamp.org/news/how-to-use-ai-generated-code/" target="_blank" rel="noopener noreferrer">How to Use AI-Generated Code in a Safe and Effective Way</a>

---

## 14. Write Maintainable Code from Day One

Clear, clean code helps your future self and teammates.  
Include comments, write thoughtful commit messages, and document decisions.

Every change you make affects others. Think ahead.

- Will this break something?
- Is it performant?
- Is it secure?
- Can other developers understand it?

Be Conscientious.

---

## 15. Why Soft Skills Matter

Your technical skills matter, but communication and teamwork matter too.  

Being a good developer isn't just about code.

- Communicate clearly. Other people don't have the information in your head.
- Listen well and pay attention, but don't be afraid to ask for clarification.
- Provide context. A Teams or Slack message with context will make it easier for the other person to respond.

Remember, you're working with people, not just computers.

You'll frequently be collaborating with people who don't have technical knowledge:
- Designers
- Customers
- Managers

---

## 16. Write Code With the Bus Factor in Mind

Think about whether someone else can understand your work if you're away.  
Use clear naming, documentation, and share knowledge through readmes and hand-offs.

If you disappeared tomorrow, would anyone else be able to understand your work?

---

## 17. Build Your Online Presence

Your online presence shows who you are as a developer.  
Keep your GitHub up to date, write blog posts, share projects, and build a LinkedIn profile to amplify your work.

**Resource:** <a href="https://www.freecodecamp.org/news/how-to-build-a-developer-portfolio-website/" target="_blank" rel="noopener noreferrer">How to Build Your Own Developer Portfolio Website with HTML, CSS, and JavaScript</a>

---

## Final Thoughts

Starting your tech journey can feel overwhelming, but every senior dev has been where you are now.  
Focus on asking good questions, building in public, learning from mistakes, and applying these practical habits every day.

Each small step compounds into real growth. Keep going.

---

## Where to Find Me

You can also follow me on <a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a> or on my <a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a> for updates.
]]></content:encoded>
  </item>

  <item>
    <title><![CDATA[Welcome to My Blog]]></title>
    <link>https://blog.joecastle.co.uk/blog/welcome-to-my-blog</link>
    <guid>https://blog.joecastle.co.uk/blog/welcome-to-my-blog</guid>
    <pubDate>Sun, 27 Apr 2025 00:00:00 GMT</pubDate>
    <author>Joseph Castle</author>
    <category><![CDATA[introduction]]></category>
    <category><![CDATA[developer blog]]></category>
    <category><![CDATA[developer advice]]></category>
    <category><![CDATA[software development]]></category>
    <category><![CDATA[junior developer]]></category>
    <category><![CDATA[career tips]]></category>
    <description><![CDATA[A brief introduction to my blog, my background, and what you can expect as a reader.]]></description>
    <content:encoded><![CDATA[
# Welcome!

Hi, I'm Joe, a software developer and sci-fi enthusiast. I started JoeBloggs to share my journey, lessons learned, and the occasional rant.

I'm a Senior Full-Stack Software Developer based in the UK. I have experience building bespoke web applications using React, TypeScript, .NET and SQL Server.

## Why This Blog?

When I was starting out, I found the tech world both exciting and overwhelming. There were so many resources, but it was hard to find practical advice. My goal is to create the kind of blog I wish I'd found as a junior developer: friendly, helpful, and straightforward.

## What You'll Find Here

- **Career advice** for junior and aspiring developers
- **Stories from the trenches** real-world lessons, mistakes, and wins
- **Coding tutorials and walkthroughs** (from beginner to advanced)
- **Book and tool reviews**
- **Sci-fi references and tie-ins** (because why not?)

## My Goal

I believe learning should be fun, inclusive, and community-driven. I hope you'll find something here to inspire you and point you in the right direction.

## Where to find me

You can also follow me on <a href="https://github.com/JoeCastle" target="_blank" rel="noopener noreferrer">GitHub</a> or on my <a href="https://joecastle.co.uk" target="_blank" rel="noopener">Portfolio</a> for updates.
]]></content:encoded>
  </item>
  </channel>
</rss>