@use './variables.scss' as *;
@use 'sass:list';
@use 'sass:map';

// === THEME TRANSITION MIXIN ===
@mixin transition-properties($properties) {
    $transition-list: (
    );

@each $prop in $properties {
    $transition-list: list.append($transition-list, $prop $global-animation-time ease-in-out, comma);
}

transition: $transition-list;
will-change: $properties;
}

// === THEME BASE MIXIN ===
@mixin apply-theme($theme) {
    color: map.get($theme, text);
    background-color: map.get($theme, background);
    --accent-color: #{map.get($theme, accent)};
    --muted-color: #{map.get($theme, muted)};
}

// === THEME CONTENT STYLING MIXIN ===
@mixin apply-theme-to-elements($theme, $is-dark: false) {
    .content-container h2 {
        border-bottom: 3px solid if($is-dark, $dark-navbar-font-colour-hover, $light-navbar-font-colour-hover);
        @include transition-properties((border-bottom));
    }

    input,
    textarea {
        background-color: map.get($theme, background);
        color: map.get($theme, text);
        border: if($is-dark, $dark-border, $light-border);
        @include transition-properties((color, background-color, border));
    }

    .project-summary-tile,
    .skill-summary-tile,
    .skillarea-summary-tile {
        background-color: map.get($theme, background);
        border: if($is-dark, $dark-border, $light-border);
        @include transition-properties((background-color, border));
    }

    .about .socials>a>div {
        background-color: map.get($theme, background);

        @if not $is-dark {
            box-shadow: 4px 4px 12px -4px rgba(0, 0, 0, 0.3);
        }

        @else {
            border: $dark-border;
        }

        @include transition-properties((background-color, box-shadow));
    }

    ul.skillarea-summary-tile-techs>li {
        color: $standard-blue-background;
        @include transition-properties((color));

        >span {
            color: map.get($theme, text);
            @include transition-properties((color));
        }
    }

    footer {
        background-color: if($is-dark, $dark-navbar-background-colour, $light-secondary-background-colour);
        @include transition-properties((background-color));

        a {
            color: $standard-blue-background;
            @include transition-properties((color));
        }

        .socials-footer>a>div {
            background-color: map.get($theme, background);
            @include transition-properties((background-color));
        }
    }
}

// === NAVBAR THEME MIXIN ===
@mixin navbar-theme($is-dark) {
    $background: if($is-dark, $dark-navbar-background-colour, $light-secondary-background-colour);
    $font-colour: if($is-dark, $dark-navbar-font-colour, $light-navbar-font-colour);
    $hover-colour: if($is-dark, $dark-navbar-font-colour-hover, $light-navbar-font-colour-hover);
    $bg-hover: if($is-dark, $dark-navbar-background-colour, $light-navbar-background-colour);
    $border-colour: if($is-dark, $dark-navbar-background-colour, $light-secondary-background-colour);
    $toggler-border: if($is-dark, #333, #a2a2a2);

    background-color: $background;
    color: $font-colour;
    border: 1px solid $border-colour;

    @include transition-properties((color, background-color, border-color));

    a {
        color: $font-colour !important;
        @include transition-properties((color, background-color, border-color));
    }

    a:hover,
    a.active:hover,
    a.active {
        color: $hover-colour !important;
        background-color: $bg-hover !important;
    }

    .container-fluid .navbar-collapse {
        @media (min-width: $mobile-min-width-breakpoint) {
            a:after {
                background-color: $hover-colour;
            }
        }
    }

    .navbar-toggler {
        border-color: $toggler-border;
        @include transition-properties((border-color));
    }
}

// === CODE BLOCK THEME MIXIN ===
@mixin apply-code-theme($is-dark: false) {

    // Base code block styling
    .hljs {
        color: if($is-dark, #abb2bf, #383a42);
        background: if($is-dark, #282c34, #fafafa);
    }

    // Comments and quotes
    .hljs-comment,
    .hljs-quote {
        color: if($is-dark, #5c6370, #a0a1a7);
        font-style: italic;
    }

    // Keywords, doctags, and formulas
    .hljs-doctag,
    .hljs-formula,
    .hljs-keyword {
        color: if($is-dark, #c678dd, #a626a4);
    }

    // Names, sections, tags
    .hljs-deletion,
    .hljs-name,
    .hljs-section,
    .hljs-selector-tag,
    .hljs-subst {
        color: if($is-dark, #e06c75, #e45649);
    }

    // Literals
    .hljs-literal {
        color: if($is-dark, #56b6c2, #0184bb);
    }

    // Strings, regexps
    .hljs-addition,
    .hljs-attribute,
    .hljs-meta .hljs-string,
    .hljs-regexp,
    .hljs-string {
        color: if($is-dark, #98c379, #50a14f);
    }

    // Variables, numbers, selectors
    .hljs-attr,
    .hljs-number,
    .hljs-selector-attr,
    .hljs-selector-class,
    .hljs-selector-pseudo,
    .hljs-template-variable,
    .hljs-type,
    .hljs-variable {
        color: if($is-dark, #d19a66, #986801);
    }

    // Links, meta, symbols
    .hljs-bullet,
    .hljs-link,
    .hljs-meta,
    .hljs-selector-id,
    .hljs-symbol,
    .hljs-title {
        color: if($is-dark, #61aeee, #4078f2);
    }

    // Built-ins, classes
    .hljs-built_in,
    .hljs-class .hljs-title,
    .hljs-title.class_ {
        color: if($is-dark, #e6c07b, #c18401);
    }

    // Copy button styling
    .code-block-wrapper .copy-button {
        background-color: if($is-dark, #3e4451, #e1e4e8);
        color: if($is-dark, #abb2bf, #24292e);
        border: 1px solid if($is-dark, #4b5363, #d1d5da);

        &:hover {
            background-color: if($is-dark, #4b5363, #d1d5da);
        }
    }
}

// === CODE BLOCK TRANSITION ===
.hljs,
.hljs-comment,
.hljs-quote,
.hljs-doctag,
.hljs-formula,
.hljs-keyword,
.hljs-deletion,
.hljs-name,
.hljs-section,
.hljs-selector-tag,
.hljs-subst,
.hljs-literal,
.hljs-addition,
.hljs-attribute,
.hljs-meta .hljs-string,
.hljs-regexp,
.hljs-string,
.hljs-attr,
.hljs-number,
.hljs-selector-attr,
.hljs-selector-class,
.hljs-selector-pseudo,
.hljs-template-variable,
.hljs-type,
.hljs-variable,
.hljs-bullet,
.hljs-link,
.hljs-meta,
.hljs-selector-id,
.hljs-symbol,
.hljs-title,
.hljs-built_in,
.hljs-class .hljs-title,
.hljs-title.class_,
.hljs-emphasis,
.hljs-strong,
.hljs-link {
    transition:
        color $global-animation-time ease-in-out,
        background-color $global-animation-time ease-in-out,
        border-color $global-animation-time ease-in-out,
        font-style $global-animation-time ease-in-out,
        font-weight $global-animation-time ease-in-out;
    will-change: color, background-color, border-color, font-style, font-weight;
}

// === LIGHT THEME ===
.theme-container {
    @include apply-theme($light-theme);
    @include transition-properties((color, background-color));
    @include apply-theme-to-elements($light-theme, false);
    @include apply-code-theme(false);

    nav.navbar {
        @include navbar-theme(false);
    }
}

// === DARK THEME ===
.theme-container.dark-theme {
    @include apply-theme($dark-theme);
    @include apply-theme-to-elements($dark-theme, true);
    @include apply-code-theme(true);

    nav.navbar {
        @include navbar-theme(true);
    }
}